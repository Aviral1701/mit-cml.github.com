<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://explore.appinventor.mit.edu"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>admin_explore&#039;s blog</title>
 <link>http://explore.appinventor.mit.edu/blogs/adminexplore</link>
 <description></description>
 <language>en</language>
<item>
 <title>Reactions to a CS10k Webinar: Block Party</title>
 <link>http://explore.appinventor.mit.edu/blogs/adminexplore/2015-1</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;em&gt;Note: This post is re-blogged from &lt;a href=&quot;https://csforhumanity.wordpress.com/2015/10/12/reactions-to-a…ar-block-party/&quot;&gt;https://csforhumanity.wordpress.com/2015/10/12/reactions-to-a…ar-block-party/&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I write this without having listened to the recording of the first half of the webinar, “Block Party: Meet Some of the Creative Minds Behind Blockly, Scratch, and More!”, which took place live on the evening of October 7, 2015. I hope my reactions prove spurious after listening to the recording of the full webinar. I am afraid, however, they will not be. And at the very least, they reflect my experience. I hope they will resonate with some others, and encourage you to share your enthusiasm for computing with others.&lt;/p&gt;
&lt;p&gt;I listened to, and participated in the chat for approximately the last 25 minutes of the event. There was certainly some interesting discussion, among some very enlightened and well- meaning people, representing thought leaders in Computer Science and/or Computing Education.&lt;/p&gt;
&lt;p&gt;Given that, however, I cannot help but ask question: “Why did the majority of what I heard focus narrowly on how we teach what is often taken as a vocational skill, namely programming, most effectively?” There were a few half-hearted nods to computer science-specific formulations. The message I got loud and clear, however, was that we should figure out how can we get kids proficient in Java(script) as quickly as possible.&lt;/p&gt;
&lt;p&gt;And it intrigues me that this ended up being the case. I know many of the people who participated, and they believe firmly in much more transcendent ideals. Why, one of the curricula based on one of these blocks languages is entitled “The Beauty and Joy of Computing.”&lt;/p&gt;
&lt;p&gt;I recently had a small difference of opinion with Dr. Mark Guzdial on Facebook, in which I critiqued an article about new CS courses in Georgia for emphasizing only the vocational good they could do. His response, paraphrased, was “that’s often how these things end up getting sold.” Much more exclusively on that idea in another post, but to boil it down, there’s much more to computing and any of these languages, and we lose so much richness when we devolve into a discussion of optimizing teaching of programming.&lt;/p&gt;
&lt;p&gt;I’m not saying anything particularly new, but computing to me is about much more than the act of programming. Programming is often the last stage of a bout of computing. First, we assess the problem in our head, devising a strategy to approach it. We (why “We” and not “I”? Because computing is rarely a solitary endeavor,) may discuss it with peers, we may sketch flowcharts or notes on whiteboards or in notebooks. We often search for facts and figures, data, that have nothing to do with computers, but about the real-world problem we are trying to solve with an application of computing. Using a variety or combination of methods, decomposition/solution of parts/reassembly; machine learning; data mining; etc., we plan, eventually program and test, then repeat to find better, and finally adequate solutions. This, for tonight, is my barely adequate description of an experience of computing.&lt;/p&gt;
&lt;p&gt;Why the disparity then, between the possible discussion space and what ended up being talked about? Certainly it was not because the blocks languages that were being discussed are learning or play languages. Scratch and the languages that spawned from it scaffold creativity of several kinds. Alice and its relatives are also about self-expression, though with a slightly different flavor. Pencil Code, to my poor estimation, strives to give fast ability to control real tools. Admittedly, though, I’m biased, and know the most about about one particular tool, MIT App Inventor.&lt;/p&gt;
&lt;p&gt;MIT App Inventor strives to give beginners and experienced programmers fast control over mobile devices (yes, still Android only) through high level abstractions that allow the app creator to do real, meaningful things. What does that mean? There are myriad examples, ranging from crowdsourcing access to sanitary toilets in Lagos, to developing apps for tracking student location on school and/or city buses, both domestically in the US and in Bangalore, among other locations. Are they all so goody-goody? No - kids (and adults) make fart noise apps too - and those are popular and exciting, and represent the thrill of computing as well - they allow the app inventor to make something that promotes cognitive dissonance - a phone farting!?! How much more fun, and relatively innocently disruptive can you get?&lt;/p&gt;
&lt;p&gt;So, to close, let’s strive to elevate the discussion - let’s talk about the Beauty and Joy of Computing, farting phones and all. Let’s talk about why we love computing, and how programming enables that.&lt;/p&gt;
&lt;p&gt;Somehow, with only a gut feeling to support this, I suspect that we should curtail our inclination to debate in the esoteric weeds the relative merits of one blocks-to-text conversion tool vs. another. Instead, let’s spend more time developing and telling the inspirational stories to pass to youth who may not hear them otherwise. Enthusiasm is contagious, sometimes… I’m convinced if we share our true enthusiasm for problem solving and computing, vs. vigorously discussing arcane points, we will share that youthful enthusiasm with a larger AND broader audience of youth.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 12 Oct 2015 01:23:40 +0000</pubDate>
 <dc:creator>admin_explore</dc:creator>
 <guid isPermaLink="false">649 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Exciting News from Boise State University</title>
 <link>http://explore.appinventor.mit.edu/blogs/adminexplore/2015-0</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;We just heard some very exciting news from our good friend Yu-Chang Hsu at Boise State University:&lt;/p&gt;
&lt;p&gt;The National Science Foundation Directorate of Education and Human Resources has awarded Boise State University a $163,660 supplemental funding grant to support using App Inventor to help STEM students learn trigonometry by developing their own math learning apps through team-based learning.&lt;/p&gt;
&lt;p&gt;The project title is, &quot;Boise State University Pilot: Using Student-Developed Apps to Frame Mathematics, Science, and Engineering Learning.&quot; The interdisciplinary project team includes,&lt;/p&gt;
&lt;p&gt;Doug Bullock (Department of Mathematics)&lt;br /&gt;
Janet Callahan (Department of Materials Science and Engineering)&lt;br /&gt;
Yu-Hui Ching (Department of Educational Technology)&lt;br /&gt;
Yu-Chang Hsu (Department of Educational Technology)&lt;/p&gt;
&lt;p&gt;The students will learn to use App Inventor 2 to collaboratively develop apps that require applying trigonometry knowledge and help peers learn trigonometry. The students will use their own apps as refresher in the following advanced STEM (science, technology, engineering, and math) courses. These apps will benefit the trigonometry class and other cohort of STEM students. The students will strengthen their math knowledge by applying it to app development with real-world impact, and engage in computational thinking as well as problem solving tasks.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 11 Sep 2015 14:26:18 +0000</pubDate>
 <dc:creator>admin_explore</dc:creator>
 <guid isPermaLink="false">630 at http://explore.appinventor.mit.edu</guid>
</item>
</channel>
</rss>
