<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://explore.appinventor.mit.edu"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>Explore MIT App Inventor blogs</title>
 <link>http://explore.appinventor.mit.edu/blog</link>
 <description></description>
 <language>en</language>
<item>
 <title>MOSTEC Inventors Showcase Summer Apps</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/09-0</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://oeop.mit.edu/programs/mostec&quot; target=&quot;_blank&quot;&gt;MOSTEC&lt;/a&gt;, the MIT Online Science, Technology, and Engineering Community program, allows rising high school seniors the opportunity for academic study in several areas of STEM during the summer, followed by several months of enrichment activities during the fall of their senior year.
&lt;/p&gt;
&lt;p&gt;
Students choose to focus in one particular area, such as AstroPhysics, Aeronautical and Astronautical Engineering, and Mobile App Development. This July, MOSTEC participants took online classes in their chosen area for the entire month, then met as a larger group for a week of continued academic and social interaction in early August.
&lt;/p&gt;
&lt;p&gt;
I had the opportunity to meet some of these talented young people during their week of residence at MIT in August. The Mobile App Computing class met all week refining apps that they had worked on virtually throughout the summer. Each student created their own app, and the entire class worked on a group app together.
&lt;/p&gt;
&lt;p&gt;
Andrew McKinney, Director of Software Development for MIT App Inventor, and three visiting students - William Byrne from Northwestern University, and  Sauce and Andy from Hong Kong Polytechnic University - spent time with the class showing them the new Bluetooth Low Energy extension for App Inventor that allows users to create apps to interact with connected devices. Students got to see some neat demos of an app that tracked breathing capability by connecting to a spirometer, a bluetooth LE chat app, and an app that checks when a pill bottle is opened and closed.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/name-game.png&quot; alt=&quot;Name Game app screenshot&quot; style=&quot;float: left; margin-right: 3px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/spanish-app.png&quot; alt=&quot;Spanish learning app screenshot&quot; style=&quot;float: left; margin-right: 3px; margin-top: -20px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/travel-app.png&quot; alt=&quot;Where Should I Travel app screenshot&quot; style=&quot;float: left; margin-right: 3px; margin-top: -40px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/shopper-app.png&quot; alt=&quot;Costco Wholesale+ app screenshot&quot; style=&quot;float: left; margin-right: 3px; margin-top: -60px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/nyc-app.png&quot; alt=&quot;My NYC! app screenshot&quot; style=&quot;float: left; width: 18%; margin-top: -80px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear:both;&quot;&gt;
The final day of the week, each MOSTEC class presented their work to the larger group. The Mobile App Development students presented on MIT App Inventor, the social impact of apps, and then demonstrated the apps they had created as part of the program, using App Inventor.
&lt;/p&gt;
&lt;p&gt;
The group project, &lt;strong&gt;The Name Game&lt;/strong&gt;, was their method of learning each other’s names as their initial interactions were all virtual. The app enabled them to learn about each other before meeting face-to-face and also meant they had to collaborate to design, build, and test the app.
&lt;/p&gt;
&lt;p&gt;
There were many other interesting and unique apps demonstrated by the MOSTEC students. Here is a sampling of some of the apps:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Read it, Write it, and Speak it! (Spanish Version)&lt;/strong&gt;, by Stacy Manrique, teaches the Spanish alphabet, some basic Spanish phrases, numbers, colors, months and days, and food. Besides teaching vocabulary by simply displaying the words translated to Spanish, it also allows the user to hear how words are pronounced. Additionally, it teaches users facts about the Spanish language and culture.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Where Should I Travel?&lt;/strong&gt;, by Sara Kolbehdari, is a neat app that quizzes the user in order to determine where they should travel. After answering a series of questions, the user gets to see what is the optimum destination for their next travel experience. The user can then view the destination on a map.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Costco Wholesale+&lt;/strong&gt;, by Pablo and Willy, connects shoppers with similar interests so they can partner to take advantage of bulk discounts. Users can search for like-minded shoppers by category, then see a thread of posts and contact each other via text.
&lt;/p&gt;
&lt;p&gt;
Nicole Diaz and Melissa Aguirre used their extensive knowledge of the Big Apple to create &lt;strong&gt;Let’s Go NYC!&lt;/strong&gt; The app allows users to search and choose activities to do in New York. Aside from providing information about the activity, the app also provides directions to the activity. Users can search by age group and then by activity types. No way to be bored in NYC with this app!
&lt;/p&gt;
&lt;p&gt;
All the students’ apps presented showed creative and thoughtful planning and implementation. They showed poise and enthusiasm for app creation and entrepreneurship. &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Thu, 01 Sep 2016 20:39:21 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">796 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>WeTeach_CS Summit</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/09</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/roy.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Krishnendu Roy&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;
The Center for STEM Education at The University of Texas at Austin hosted the first WeTeach_CS Summit during June 7-9, 2016 (&lt;a href=&quot;http://www.thetrc.org/cs-summit-2016/&quot;&gt;http://www.thetrc.org/cs-summit-2016/&lt;/a&gt;). In this K12 teachers workshop around 280 K12 teachers from all across Texas participated in three days of training and professional development activities in various computing related topics that will help them to offer new and improved computing courses and lessons in their classrooms. App Inventor was well covered in multiple sessions. App Inventor Master Trainer Dr. Krishnendu Roy presented a session titled “Introduction to MIT App Inventor”. In this session around 90 K12 teachers were introduced to App Inventor environment. Most of the participants in this session have never worked on App Inventor before. Dr. Ralph Morelli, Professor of Computer Science at Trinity College and App Inventor Master Trainer Pauline Lake presented a session on Mobile CSP titled “Mobile CS Principles: Learning CS By Building Socially Useful Mobile Apps” which also featured App Inventor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Thu, 01 Sep 2016 19:27:46 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">795 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Experiments with Virtual Reality and MIT App Inventor</title>
 <link>http://explore.appinventor.mit.edu/blogs/hal/2016/08</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;Interest in virtual reality (VR) and augmented reality (AR) applications  is exploding.  Last month&#039;s Pokemon Go craze barely hints at what&#039;s coming.   Should we look forward to App Inventor creating  apps with  VR and AR?&lt;br /&gt;&lt;br /&gt;
I want to give a shout- out to Kseniia Shumelchyk , who worked with MIT App Inventor this summer in Google&#039;s Summer of Code program,  creating App Inventor apps for Google&#039;s Cardboard viewer.  You can see her paper about this here:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://ai2.appinventor.mit.edu/reference/other/vr.html&quot;&gt;Experiments with Virtual Reality and MIT App Inventor&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
Kseniia&#039;s paper presents two demo apps -- one that shows a panorama view and one that shows a 3D object.   You can run these demos, or build them for yourself and modify them.   Kseniia&#039;s project uses an auxiliary Java app that provides interface for the App Inventor ActiviyStarter to call the Google VR libraries.&lt;br /&gt;&lt;br /&gt;
This work is only just starting:  There&#039;s a lot to do to integrate mode VR and AR capabilities into App Inventor, and even more to do in creating great App Inventor apps that use these capabilities.&lt;br /&gt;&lt;br /&gt;
Thanks, Kseniia, for showing us how to get started!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 30 Aug 2016 01:42:06 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">793 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Synchronizing Time With App Inventor</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/08</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/interdonato.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Rich Interdonato&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Synchronizing time across mobile devices is a very challenging problem for app makers.  The moment you try to use App Inventor to make something happen on more than one device at exactly the same time, you will discover that every device reports the current time to be (slightly) different from all others - even when the devices are each set to synchronize their time with the network, as shown below.
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/synchronize-time.png&quot; style=&quot;clear: both; display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can very easily demonstrate this for yourself by setting the same alarm (for some time in the future) on more than one device and then waiting for it to go off.  When the alarms are triggered, you will find that they actually fire at different times, even though they are set to go off simultaneously.  This is true even if the devices are set to synchronize their internal clocks with the network time.&lt;/p&gt;
&lt;p&gt;
 It turns out that the clocks used in mobile devices are not perfectly accurate.  What is more, the inaccuracy in timekeeping accumulates from the moment the clock is set, such that individual seconds are more accurate than individual minutes, which are more accurate than individual hours and so on.  For example, if the true duration of each second of time kept by a clock is off by .1 ms (.0001 seconds), then each minute will be off by 6 ms (.006 seconds), each hour will be off by 360 ms (.36 seconds), and each day will off by 8640 ms (8.64 seconds).  This explains why the alarms set for the same time on different phones go off at noticeably different times, even when the devices are all &quot;synchronized&quot; to the same network time.
&lt;/p&gt;
&lt;p&gt;
In most cases, this is not a problem for App Inventors. However, if you are making a clock, a timer, or any other app that requires something to happen at a precise time (or at exactly the same moment on more than one device), then it is a very big problem indeed. For example, a student of mine wanted to create a simple app that caused the device&#039;s screen background color to be BLUE during every ODD second and to be RED during every EVEN second, in order to create a &quot;light show&quot; using many devices.  They were frustrated to discover that when the time was not the same on each device running their app, the colors didn&#039;t blink in unison, and so their app didn&#039;t really &quot;work&quot;.  Likewise, in more sophisticated multiplayer games where players (and their projectiles) move about the game worlds shared across multiple devices, if objects don&#039;t &quot;meet&quot; at the same time, these games don&#039;t really &quot;work&quot; either.  So what can we do?
&lt;/p&gt;
&lt;p&gt;
Fortunately there are a number of ways to synchronize time across multiple devices, but at present this feature is not built into App Inventor. App Inventor extensions allow you to get very accurate time if you want to write the Java code needed to communicate with a network time server, and this might be what you have to do if you require very precise timekeeping in your app. If you only need to approximately synchronize the time across devices, then you can choose any time source on the Internet as the &quot;official&quot; clock for your app.  Then you can  get the &quot;official&quot; time when your app starts, and calculate the difference between it and the device&#039;s internal time.  This time difference, called the &quot;offset&quot;, can then be used to adjust the device&#039;s time (forward or backward) to match to time reported by the &quot;official&quot; time source, more or less.
&lt;/p&gt;
&lt;p&gt;
Until Internet communication is instantaneous for everyone, having a single source of time is not a perfect solution to the synchronization problem. This is because all the devices being synchronized have to send out requests for the &quot;official&quot; time and then wait for a response back from the time server.  Even if the time server could send out &quot;official&quot; time responses at the very instant it received the requests, the response messages still take time to travel back to the requestor and are incorrect by exactly that amount of time. As long as transit time through the Internet is unpredictable, time synchronization will be inexact.
&lt;/p&gt;
&lt;p&gt;
Since the &quot;official&quot; time that is received by the app requesting it was only accurate at the moment the message was sent by the server, the receiver needs to adjust it in order to account for the time that elapsed during the message&#039;s transit.  Although the app receiving the &quot;official&quot; time does not know exactly when the time server sent the response, it does know when it originally made the request (according to its own clock), and therefore it can determine the &quot;round trip&quot; duration of the total request-response process.  If we assume that the time required to transmit the request is the same as the time required to receive a response, then half the &quot;round trip&quot; is the time taken by the message coming back from the server.  This additional amount of time should be added to the difference between the device&#039;s internal time and the &quot;official&quot; time, in order to improve the accuracy of the calculated offset.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/synchronize-time.png?itok=7cO86Wse&quot; width=&quot;273&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 29 Aug 2016 20:12:36 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">792 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Feel the Math with App Inventor</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/08/feel</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/zhou.jpeg&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Angie Zhou&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;For a lot of young students, learning mathematics means rules to memorize and word problems that exist on paper. But as adults, we know having a sophisticated understanding of mathematical concepts will go a long way in understanding  the world and other social and natural science subjects.
 &lt;/p&gt;
&lt;p&gt;
One way we can let students feel the math and play with the math is to use a simple programming tool – MIT App Inventor. We can make practical application of mathematics come alive in the classrooms.
 &lt;/p&gt;
&lt;p&gt;
In this post, I am going to give three examples for which young students can play with various areas of mathematics, and see how it applies in real life with just a little bit of programming and lots of fun. &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Feel the calculus by drawing curved lines&lt;/li&gt;
&lt;li&gt;Think about probability and program a cheating die&lt;/li&gt;
&lt;li&gt;Understand transformation with Instagram filters&lt;/li&gt;
&lt;/ul&gt;&lt;h3 style=&quot;padding-top: 30px;&quot;&gt;Feel the calculus&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://appinventor.mit.edu/explore/ai2/paintpot-part1.html&quot; target=&quot;_blank&quot;&gt;PaintPot&lt;/a&gt; is a beginner-level app that allows users to draw on a virtual canvas.  To program drawing curved lines, students use a very interesting event-handler:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Blocks_PaintPot.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
When I taught this app, many students wondered - why are we using the DrawLine function call, which draws straight lines, to draw curved lines?
&lt;/p&gt;
&lt;p&gt;
I happily explained, to draw a curved line, you are really drawing lots of very small straight lines. These infinitesimal straight lines can make up curved lines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/PaintPotCalculus.gif&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
There, we are already giving students a sense of calculus without showing any equations.
&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 30px;&quot;&gt;Play with probability&lt;/h3&gt;
&lt;p&gt;A simple dice can be programmed using an App Inventor button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Dice.gif&quot; style=&quot;float: left; margin-right: 10px; width: 20%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Blocks_Dice1.png&quot; style=&quot;float: left; margin-right: 10px; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear:both&quot;&gt;After students learn about the basic probability concepts, apart from doing word problems, they can apply their newly acquired knowledge to program something interesting - dice with various specifications. Below is the solution for a dice with six coming up half of the time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Blocks_Dice2.png&quot; style=&quot;float: left; margin-right: 10px; width: 35%;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;clear:both; padding-top: 30px;&quot;&gt;Look at transformation&lt;/h3&gt;
&lt;p&gt;
The last example is not related to App Inventor, but I put it in here because it’s for a relatively abstract and advanced concept that is close to students’ lives.
&lt;/p&gt;
&lt;p&gt;
Back when I was young, transformation and matrices were just learning the rules and completing the problems, never seeing how it’s going to be useful. Maths teachers said they were going be useful, and I had to take their word for it.
&lt;/p&gt;
&lt;p&gt;
But now, I can tell students the photo filters they have been using can be made with transformations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Transformation.png&quot; style=&quot;display:block; margin:auto; width: 75%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Note: the formula is a hypothetical formula used to illustrate the transformation process. The real formula of a filter is most likely much more complex. &lt;/i&gt;&lt;/p&gt;
&lt;p&gt;For instance, every pixel of an image can use a formula to be transformed into a different color. If you have all the formula of the pixels worked out, then you would have built the secret formula to make a photo filter.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Blocks_Dice1.png?itok=a0azrf7Y&quot; width=&quot;408&quot; height=&quot;150&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Blocks_Dice2.png?itok=yHOb6rbw&quot; width=&quot;288&quot; height=&quot;183&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Blocks_PaintPot.png?itok=fZ8IqyeG&quot; width=&quot;480&quot; height=&quot;169&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Dice.gif?itok=HPUmf3AD&quot; width=&quot;320&quot; height=&quot;393&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/PaintPotCalculus.gif?itok=ctxGRWir&quot; width=&quot;320&quot; height=&quot;385&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Transformation.png?itok=rk-JlYv5&quot; width=&quot;480&quot; height=&quot;329&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 23 Aug 2016 19:03:36 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">788 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Welcome Mike Tissenbaum and Evan Patton to the MIT App Inventor team</title>
 <link>http://explore.appinventor.mit.edu/blogs/hal/2016/08/welcome</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;Welcome Mike Tissenbaum and Evan Patton to the MIT App Inventor team&lt;/p&gt;
&lt;p&gt;Those of us at MIT this summer already know Mike and Evan, but I&#039;d like to announce to the entire App Inventor community our delight at welcoming two our new members to the core MIT App Inventor team.&lt;/p&gt;
&lt;p&gt;Mike Tissenbaum comes to App Inventor upon completing a postdoc in Madison at the School of Education, University Wisconsin, a position he took up after earning a Ph.D. at University of Toronto&#039;s Ontario Institute for Studies in Education.   Mike&#039;s work on design principles to support collaborative inquiry in smart classrooms was nominated as the best student paper at the 2014 International Conference for the Learning Sciences (ICLS). He&#039;s interested in formal and informal learning environments to support computational literacies, and in gaining insight into these through data mining and learning analytics.  Mike has developed and run several multi-week after-school Scratch programming Camps for kids 8-16, and he&#039;s looking forward to advancing research into blocks-based programming environments and how they support learners in developing socially relevant questions about the world.   At MIT, Mike is assuming the position of research scientist in App Inventor&#039;s project for the Hong Kong primary schools on computational thinking and coding education.&lt;/p&gt;
&lt;p&gt;Our second new team member, Evan Patton, recently completed his doctorate at RPI.  Evan is new to the MIT team, but hardly new to App Inventor -- he&#039;s been a prime contributor to the Punya platform (an extension of App Inventor) and he developed the unit testing framework for Punya and App Inventor.   Beyond App Inventor, he’s been a consultant to startups in developing both Android and iOS applications.  He also administered and developed hardware to support Web applications with large user bases in the scientific community.  At MIT, Evan has now become a senior member of the App Inventor development team, and he has with special responsibility for our infrastructure with the Hong Kong project.&lt;/p&gt;
&lt;p&gt;Mike and Evan bring enormous expertise and greatly increase capacity to the MIT team.&lt;/p&gt;
&lt;p&gt;Welcome!
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 08 Aug 2016 23:39:27 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">787 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Heart Rate Monitor with Arduino/Genuino 101</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/08/heart</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/nunez.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Jose Luis Núñez&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Nowadays, the number of connected devices available through the Internet has led to connected people. The infrastructure that supports all the communications between devices is also known as the Internet of Things(IoT).
&lt;/p&gt;
&lt;p&gt;
The need to create apps that can handle IoT has contributed to the development of an extension for MIT App Inventor that provides an easy way to connect to devices.
&lt;/p&gt;
&lt;p&gt;
This tutorial will teach you how to use the Arduino/Genuino 101 board to read data from a heart rate sensor using the Bluetooth Low Energy(BLE) component. If you don&#039;t have the original sensor you can emulate it by using a potentiometer or another analog sensor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/AnimatedGIFHeartRateMonitor.gif&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Arduino/Genuino 101 board&lt;/li&gt;
&lt;li&gt;LED&lt;/li&gt;
&lt;li&gt;Heart rate sensor, potentiometer or similar analog component&lt;/li&gt;
&lt;li&gt;Arduino IDE (&lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;https://www.arduino.cc/en/Main/Software&lt;/a&gt;) with libraries BLE and CurieBLE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;The Circuit&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/fritzing.jpg&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Arduino/Genuino 101 sketch&lt;/h3&gt;
&lt;p&gt;First, we will have to implement the standard Bluetooth Low Energy &quot;Heart Rate Monitor&quot; service using the Arduino IDE and loading a sketch into our board.&lt;/p&gt;
&lt;p&gt;You can copy and paste the source code from:&lt;br /&gt;&lt;a href=&quot;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&quot; target=&quot;_blank&quot;&gt;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following points show the operating mode of the sketch:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Declare the BLE peripheral device (our Arduino board) with its service and characteristic (heart rate sensor).
&lt;/li&gt;&lt;li&gt;Wait for incoming connection with a central device (our smartphone or tablet with Bluetooth).&lt;/li&gt;
&lt;li&gt;Switch on LED to indicate that the board is connected.&lt;/li&gt;
&lt;li&gt;Read the analog sensor updating the value when it changes.&lt;/li&gt;
&lt;li&gt;Switch off the LED when the connection finishes.&lt;/li&gt;
&lt;/ol&gt;&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Designer view&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm-designer.png&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We will use the necessary arrangements to display an image of a heart that beats when the devices are bonded, a set of buttons and a label to show the status.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm-components.png&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We will read data from the sensor updating the text of the label once devices are linked. We will have to import the Bluetooth LE extension to be able to receive the values from the sensor.&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Blocks View&lt;/h3&gt;
&lt;p&gt;First, we will initialize three global variables to store the address of our Arduino/Genuino 101 board, the standard &quot;Heart Rate Monitor&quot; service and its characteristic UUIDs. If you don&#039;t know the meaning of these concepts, you should review them on the &lt;a href=&quot;http://ai2.appinventor.mit.edu/reference/other/IoT.html&quot; target=&quot;_blank&quot;&gt;MIT App Inventor IoT reference page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm0.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When the app starts, we will disable the button named &quot;btnDisconnect&quot; and the timer...it doesn&#039;t make sense if we don&#039;t have a link established.&lt;br /&gt;
At first, the user will press the Scan button and will get a list of Bluetooth devices. We will use a list picker to select our Arduino/Genuino 101 board and connect to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm1.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If all goes well we will update the status on the screen using the label. We will also enable the Disconnect button to be able to disconnect from the peripheral device and the timer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm2.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Every second, an event will trigger the clock and our app will check the connection. If all is OK, the app will play a sound of a heart beat and it will change the image while tries to get data from the sensor. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm3.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A &lt;i&gt;ByteValueChanged &lt;/i&gt;event will be triggered when our app detects a change. The new value will be assigned to the text of the label. We will have to use the math round function to convert the byte to a whole number and remove the least significant 0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm4.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, the buttons that will allow user to disconnect and exit...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;That&#039;s all!&lt;br /&gt;
Happy inventing!&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;You can download the source code from this link:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=0B0k5c5YtPa8EZWRfZWFIbkY3MG8&quot; target=&quot;_blank&quot;&gt;https://drive.google.com/open?id=0B0k5c5YtPa8EZWRfZWFIbkY3MG8&lt;/a&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&quot; target=&quot;_blank&quot;&gt;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://ai2.appinventor.mit.edu/reference/other/IoT.html&quot; target=&quot;_blank&quot;&gt;http://ai2.appinventor.mit.edu/reference/other/IoT.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm-designer.png?itok=gEGtvdFu&quot; width=&quot;480&quot; height=&quot;282&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm-components.png?itok=K4L1Rvbs&quot; width=&quot;184&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm-blocks.png?itok=l8TejI7g&quot; width=&quot;480&quot; height=&quot;287&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm.png?itok=57TaVPmH&quot; width=&quot;480&quot; height=&quot;177&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm4.png?itok=qntIcjdl&quot; width=&quot;480&quot; height=&quot;133&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm3.png?itok=Yp-vjFoM&quot; width=&quot;480&quot; height=&quot;292&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm2.png?itok=7bQHZLP2&quot; width=&quot;480&quot; height=&quot;279&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm1.png?itok=0gENQ3WL&quot; width=&quot;480&quot; height=&quot;210&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm0.png?itok=5SwBnLsp&quot; width=&quot;480&quot; height=&quot;81&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/AnimatedGIFHeartRateMonitor.gif?itok=fyODXpko&quot; width=&quot;285&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/fritzing.jpg?itok=1g-6JFGy&quot; width=&quot;306&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/heart-rate-monitor.png?itok=VOrZBD-u&quot; width=&quot;290&quot; height=&quot;226&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 08 Aug 2016 15:48:03 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">786 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>App Inventor’s debt to Seymour Papert</title>
 <link>http://explore.appinventor.mit.edu/blogs/hal/2016/08/app</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;To the App Inventor Community:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
I join in grief with my colleagues in computing and education at passing of Seymour Papert on July 31, 2016.   Papert was the world’s preeminent visionary in educational technology:  you can read testaments to his greatness in the obituaries in the New York Times and the MIT News.   Few people in the App Inventor community would have met him, and only some know his monumental book Mindstorms: Children, Computers, and Powerful Ideas.   But his genius has touched those of us who built App Inventor and everyone who uses it.
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1TpT96F8NG7-PBxd3KGjcnwsZ_fUlqdFBN42dZZpoqHU&quot;&gt;More ...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Sun, 07 Aug 2016 14:39:32 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">783 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>MIT App Inventor and Youth Radio to launch the Youth News Network STEM desk</title>
 <link>http://explore.appinventor.mit.edu/blogs/hal/2016/07/mit-app</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;
I’m exhilarated to announce that MIT App Inventor and Youth Radio (&lt;a href=&quot;https://youthradio.org/&quot;&gt;https://youthradio.org/&lt;/a&gt;)  are beginning a 3-year initiative to launch the STEM Desk for Youth News Network (YNN).  YNN will be a new nationwide model for STEM education based on youth-­driven, multimedia journalism and related app development with App Inventor.   This work is funded by the National Science Foundation’s Advanced Informal STEP Learning program.
&lt;/p&gt;
&lt;p&gt;
Youth Radio trains young people in digital media and technology and launches them on career and education pathways.  Headquartered in Oakland, CA, it serves as National Public Radio’s Youth Desk and reports stories by and about young people across the U.S., bringing youth perspectives to issues of public concern.
&lt;/p&gt;
&lt;p&gt;
YNN aims to overturn conventional beliefs about teens and their phones­­: that these devices are sources of distraction, addiction, abuse, and other forms of trouble.&lt;br /&gt;
The centerpiece of YNN will be Youth Mobile Power, a series of stories about      young people using mobile technologies with creativity and purpose to empower themselves and their communities: activities such as tracking access to fresh water in poor communities, supporting effective autism treatment, and promoting safety on college campuses.  The stories will build on Youth Radio’s Peabody Award-­winning media production capabilities and MIT’s technology strengths to create powerful multimedia productions augmented by new mobile computing resources built on App Inventor.
&lt;/p&gt;
&lt;p&gt;The App Inventor team is tremendously excited by this opportunity to collaborate with Youth Radio.  We’ll be starting work on the project in September.  Watch for us over the next 3 years as we help support and promote the next generation of mobile STEM media innovators!
&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 25 Jul 2016 22:08:37 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">780 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>AITech - Using Procedures and Any component blocks</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/07-0</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/bosman.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Sjaak Bosman&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;When components in your app have similar behavior, you can end up with a lot of blocks almost doing the same thing. Using Procedures and Any component blocks not only gives you the possibility to minimize the use of blocks, but also makes it easier for you to add new components and maintain your app in a more comfortable way.&lt;/p&gt;
&lt;div style=&quot;clear: both; width: 100%; margin-bottom: 50px;&quot;&gt;
&lt;div style=&quot;clear: both; float: left; margin-right: 10px; width: 30%;&quot;&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/0.1_design.jpg&quot; style=&quot;display: block; margin:auto; width: 100%&quot; /&gt;&lt;i&gt;Figure 0.1 Design&lt;/i&gt;&lt;/div&gt;
&lt;div width:=&quot;&quot; float:=&quot;&quot; right=&quot;&quot;&gt;
&lt;p style=&quot;padding: 3em;&quot;&gt;
To demonstrate this we are going to implement a group of 3 radio buttons using the CheckBox component.&lt;/p&gt;
&lt;p&gt;
At the end another CheckBox will be added to the group, to demonstrate the ease of using Procedures and Any component blocks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 style=&quot;clear:both; padding-top: 50px;&quot;&gt;Step 1. Straightforward&lt;/h2&gt;
&lt;p&gt;Pressing a CheckBox will fire its Changed event handler, in which we uncheck both other CheckBoxes. So far it doesn&#039;t look that difficult:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/1.1_straightforward_blocks.jpg&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 1.1: Straightforward blocks&lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;padding-top: 3em&quot;&gt;When the user presses Small, its CheckBox will be checked: A green check mark will appear and the Checked property of the chbSizeSmall component will be set to true.
&lt;/p&gt;
&lt;p&gt;
When the users presses Medium next, Small will be unchecked. Now we expect Medium to be checked, but that is not what is happening:
&lt;/p&gt;
&lt;div style=&quot;display:block; margin:auto; width: 100%; padding-bottom: 3em;&quot;&gt;
&lt;div style=&quot;float: left; margin-left: 20%; margin-right: 10%; width: 20%;&quot;&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/1.2_press_small.png&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 1.2 Press Small&lt;/i&gt;
&lt;/div&gt;
&lt;div style=&quot;float: left; margin-right: 10%; width: 20%;&quot;&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/1.3_press_medium.png&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 1.3 Press Medium&lt;/i&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;clear:both; padding-top: 3em;&quot;&gt;What is going on here?
&lt;/p&gt;
&lt;p&gt;
Pressing Medium causes a Changed event for Medium (1). In the event handler the Checked property of Small is being set to false (2).
&lt;/p&gt;
&lt;p&gt;
Because the Checked property of Small is true (figure 1.2), a Changed event will occur (3). As a result the Checked property of Medium will be set to false (4):
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/1.4_blocks.jpg&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 1.5: Blocks&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;A Changed event for Medium will also occur again, because of the change from true (because of user action) to false (4), but that doesn’t change anything anymore (setting Small and Large to false, what they are already are).&lt;/p&gt;
&lt;h2 style=&quot;clear:both; padding-top: 50px;&quot;&gt;Step 2. Straightforward and working&lt;/h2&gt;
&lt;p&gt;
So before we can optimize our blocks by using Procedures and Any component blocks, which is initially our plan and the meaning of this blog, we have to solve this little unwanted feature.
&lt;/p&gt;
&lt;p&gt;
Our goal is to prevent the blocks inside a Changed event handler from being executed when it was not fired because of user action. To do so we are going to use its Enabled property.
&lt;/p&gt;
&lt;p&gt;
First all the blocks inside the Changed event handler will be moved into an if-then control block (blocks in the red rectangle). The if-condition will be the Enabled property of that CheckBox. As a result the blocks in the then-part will only be executed if the Enabled property of that CheckBox is true.
&lt;/p&gt;
&lt;p&gt;
Next all CheckBoxes have to be disabled (by setting the Enabled property to false) before changing the Checked property of the other CheckBoxes. Finally all CheckBoxes must be enabled, to make them available to the user again.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/2.1_straightforward_blocks.jpg&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 2.1: Straightforward blocks&lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;padding-top: 3em;&quot;&gt;Now it’s almost working:&lt;/p&gt;
&lt;div style=&quot;display:block; margin:auto; width: 100%;&quot;&gt;
&lt;div style=&quot;float: left; margin-left: 5%; margin-right: 5%; width: 20%;&quot;&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/2.2_press_small.png&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 2.2: Press Small&lt;/i&gt;
&lt;/div&gt;
&lt;div style=&quot;float: left; margin-right: 5%; width: 20%;&quot;&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/2.3_press_medium.png&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 2.3: Press Medium&lt;/i&gt;
&lt;/div&gt;
&lt;div style=&quot;float: left; margin-right: 5%; width: 20%;&quot;&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/2.4_press_medium_again.png&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 2.3: Press Medium again&lt;/i&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;clear: both; padding-top: 3em;&quot;&gt;
Pressing a checked CheckBox (figure 2.3) results in all CheckBoxes being unchecked. That issue will be solved in Step 5.
&lt;/p&gt;
&lt;p&gt;
As you can see, each event handler holds a lot of the same blocks: Setting the Enabled property of all CheckBoxes to false and, after setting the Checked property of the other CheckBoxes to false, back to true. If you add another CheckBox to this group of radio buttons, you will have to add a lot of blocks in lots of different places.
&lt;/p&gt;
&lt;h2 style=&quot;clear:both; padding-top: 50px;&quot;&gt;Step 3. Introducing a Procedure&lt;/h2&gt;
&lt;p&gt;This is the moment where it is handy to use a Procedure to concentrate functionality in one place. Except for the if-then control block, all blocks can be moved to the newly created procedure. Of course identical blocks can then be deleted. You can find the Procedure blocks in the Built-in section of the Blocks pane in the Blocks editor.
&lt;/p&gt;
&lt;p&gt;
Because setting the Checked property of the other CheckBoxes to false (figure 1.5) depends on which CheckBox was pressed, this has to be done conditionally. Therefore the Procedure must know which CheckBox was pressed, which can be realized by adding an input parameter to the procedure (click the small blue square in the upper left corner of the Procedure block to add an input parameter):
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/3.1_procedure_blocks.jpg&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 3.1: Procedure blocks&lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;padding-top: 3em;&quot;&gt;
Yet this is still not a generic situation. In the Procedure we must check for the value of the input parameter to determine for which CheckBoxes the Checked property must be set to false.
&lt;/p&gt;
&lt;p&gt;
Also, if we add another CheckBox later on, the Procedure must be modified to include blocks for the new CheckBox.
&lt;/p&gt;
&lt;h2 style=&quot;clear:both; padding-top: 50px;&quot;&gt;Step 4. Introducing the Any component block&lt;/h2&gt;
&lt;div style=&quot;display: block; margin: auto; width: 100%; padding-bottom: 3em;&quot;&gt;
&lt;div style=&quot;float: left; width: 25%; margin-right: 10%;&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/4.1_any_component_properties.jpg&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 4.1: Any component properties&lt;/i&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div style=&quot;float:right; width: 70%;&quot;&gt;
&lt;p style=&quot;padding-top: 3em;&quot;&gt;To implement a generic solution we are going to use the Any component blocks, in our example the Any CheckBox component.
&lt;/p&gt;
&lt;p&gt;
They look like the specific property blocks equivalent, but in addition give you the possibility to specify the component for which you want to set or get a property.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;display: block; margin: auto; width: 100%; padding-bottom: 3em; padding-top: 3em;&quot;&gt;
&lt;div style=&quot;float: left; width: 25%;&quot;&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/4.2_component_as_property.jpg&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 4.2: Component as property&lt;/i&gt;
&lt;/div&gt;
&lt;div style=&quot;float:right: width: 70%;&quot;&gt;
&lt;p style=&quot;margin-top: 3em;&quot;&gt;
One property of a component is the component itself. It can be found at the bottom of the list of the component’s event handler and property getters and setters.&lt;/p&gt;
&lt;p&gt;To be able to process all CheckBoxes, we add them to a list (1a) which can be processed by a for-each control block. Adding of the CheckBoxes to the list cannot be done upon initialization of the variable and therefore has to be done upon initialization of the app (1b).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;clear: both; padding-top: 3em;&quot;&gt;
To let the procedure know which CheckBox it concerns, the CheckBox itself can be passed as parameter (3a and 3b). The if-condition to check if the CheckBox is Enabled has the same structure for all our CheckBoxes, and can now be moved to the Procedure too (2).
&lt;/p&gt;
&lt;p&gt;
The for-each loop (4) returns one CheckBox component from the list at a time and stores it in a local variable. Now we are able to set the Enabled property to false for all CheckBox components in our radio button group in just a single block (5).
&lt;/p&gt;
&lt;p&gt;
Next all Checked properties must be set to false (6b), except for the CheckBox that was pressed (6a).
&lt;/p&gt;
&lt;p&gt;
At last all CheckBoxes must be Enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/4.3_any_component_blocks.jpg&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;i&gt;Figure 4.3: Any component blocks&lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;padding-top: 3em;&quot;&gt;This powerful combination of a list, for-each loop, Any component blocks and a Procedure gives you the ability to create flexible apps that are easy to modify and expand.&lt;/p&gt;
&lt;h2 style=&quot;clear:both; padding-top: 50px;&quot;&gt;Step 5. Adding another CheckBox&lt;/h2&gt;
&lt;div style=&quot;margin:auto: display: block; width: 100%; padding-bottom: 3em;&quot;&gt;
&lt;div style=&quot;float: left; margin-right: 10px; width: 30%;&quot;&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/5.1_design.jpg&quot; style=&quot;width: 100%;&quot; /&gt;&lt;br /&gt;&lt;i&gt;Figure 5.1: Design&lt;/i&gt;
&lt;/div&gt;
&lt;div style=&quot;float: right; width: 65%;&quot;&gt;
&lt;p style=&quot;padding-top: 3em;&quot;&gt;Another CheckBox will be added to the radio button group, to demonstrate the ease of using Procedures and Any component blocks.&lt;/p&gt;
&lt;p&gt;
Adding another CheckBox to the Radio button group now only consist out of a few simple steps. First add the CheckBox to the designer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;clear: both; padding-top: 3em;&quot;&gt;
In the Blocks Editor you have to add the newly created CheckBox to the list (1) and add its Changed event handler (2). That’s all!
&lt;/p&gt;
&lt;p&gt;
Maybe you noticed that a Checked CheckBox can be unchecked, leaving the radio button group with no selection at all. If you don’t want that to be an option, force the concerning CheckBox to true (3). Prior to this now all CheckBoxes can unconditionally be set to false, which makes our Procedure even easier.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/5.2_extra_checkbox_blocks.jpg&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;i&gt;Figure 5.2 Extra CheckBox Blocks&lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;clear:both; padding-top: 3em;&quot;&gt;Suggestions or questions? Please send an e-mail to   &lt;span id=&quot;7fcabfe4911afec8b5b8fd80ef54fc7b1cfad1d3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--//--&gt;&lt;![CDATA[// &gt;&lt;!--
 &lt;!--
  document.getElementById(&#039;7fcabfe4911afec8b5b8fd80ef54fc7b1cfad1d3&#039;).innerHTML = &#039;&lt;a href=&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#65;&amp;#73;&amp;#50;&amp;#77;&amp;#77;&amp;#84;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#65;&amp;#73;&amp;#50;&amp;#77;&amp;#77;&amp;#84;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&#039;;
// --&gt; 
//--&gt;&lt;!]]&gt;
&lt;/script&gt;&lt;p&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/0.1_design.jpg?itok=Tmmiud0q&quot; width=&quot;480&quot; height=&quot;430&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/1.1_straightforward_blocks.jpg?itok=h9S5Ypbv&quot; width=&quot;480&quot; height=&quot;39&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/1.2_press_small.png?itok=3hbGwA3u&quot; width=&quot;270&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/1.3_press_medium.png?itok=EQg-Tv9q&quot; width=&quot;270&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/1.4_blocks.jpg?itok=T6F9sSDo&quot; width=&quot;480&quot; height=&quot;39&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/2.1_straightforward_blocks.jpg?itok=IcVWmH73&quot; width=&quot;480&quot; height=&quot;102&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/2.2_press_small.png?itok=pFstzV_h&quot; width=&quot;270&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/2.3_press_medium.png?itok=k4C_eGf7&quot; width=&quot;270&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/2.4_press_medium_again.png?itok=HKvzCrmF&quot; width=&quot;270&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/3.1_procedure_blocks.jpg?itok=bFZNOXBc&quot; width=&quot;480&quot; height=&quot;255&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/4.1_any_component_properties.jpg?itok=V_5Bx0zv&quot; width=&quot;450&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/4.2_component_as_property.jpg?itok=jParUYtX&quot; width=&quot;353&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/4.3_any_component_blocks.jpg?itok=jzPZLRZJ&quot; width=&quot;480&quot; height=&quot;249&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/5.1_design.jpg?itok=obiz--NK&quot; width=&quot;480&quot; height=&quot;430&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/5.2_extra_checkbox_blocks.jpg?itok=iuBF8qKX&quot; width=&quot;480&quot; height=&quot;284&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 25 Jul 2016 15:43:32 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">779 at http://explore.appinventor.mit.edu</guid>
</item>
</channel>
</rss>
