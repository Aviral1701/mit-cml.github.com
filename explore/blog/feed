<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://explore.appinventor.mit.edu"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>Explore MIT App Inventor blogs</title>
 <link>http://explore.appinventor.mit.edu/blog</link>
 <description></description>
 <language>en</language>
<item>
 <title>An easy way to add a bar graph to your app in App Inventor</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/10/easy</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/hochgraf.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Clark Hochgraf&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;You can create a simple bar graph in App Inventor using a button and a vertical arrangement. In the image below, the blue bar is a button whose height percent is set by the slider. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/bar-chart.png&quot; style=&quot;clear:both; display:block; margin:auto; width: 35%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To create the bar graph, add a &lt;strong&gt;VerticalArrangement &lt;/strong&gt;on the Designer Tab. Configure the vertical arrangement as follows:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AlignHorizontal to &lt;strong&gt;Center&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AlignVertical to &lt;strong&gt;Bottom&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Height to &lt;strong&gt;50%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Width to &lt;strong&gt;14%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/chart-properties.png&quot; style=&quot;display:block; margin:auto; width: 25%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Next, place a &lt;strong&gt;Button&lt;/strong&gt; inside the vertical arrangement. The button should appear at the bottom of the VerticalArrangement.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;BackgroundColor to &lt;strong&gt;Blue&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Width to &lt;strong&gt;10%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/chart-properties-2.png&quot; style=&quot;display:block; margin:auto; width: 25%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Next, place a &lt;strong&gt;Label&lt;/strong&gt; inside the &lt;strong&gt;VerticalArrangement&lt;/strong&gt; and position it so that it is below the &lt;strong&gt;Button&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Height to &lt;strong&gt;4%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Text to &lt;strong&gt;“0”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TextAlignment to &lt;strong&gt;Center&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/chart-properties-3.png&quot; style=&quot;display:block; margin:auto; width: 25%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/chart-screenshot.png&quot; style=&quot;display:block; margin:auto; width: 35%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/chart-blocks.png&quot; style=&quot;display:block; margin:auto; width: 60%;&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/bar-chart.png?itok=SJurt_P8&quot; width=&quot;270&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/chart-blocks.png?itok=GBl9jDHu&quot; width=&quot;480&quot; height=&quot;108&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/chart-properties.png?itok=-lNyxeTw&quot; width=&quot;243&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/chart-properties-2.png?itok=qQyQTHFw&quot; width=&quot;229&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/chart-properties-3.png?itok=WpPKqx-J&quot; width=&quot;174&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/chart-screenshot.png?itok=_ND7E9KG&quot; width=&quot;320&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Thu, 06 Oct 2016 14:38:29 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">807 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Computational Thinking Concepts with App Inventor for Primary School Children</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/09-2</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/lam.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Carly Lam&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;CS One Academy offers programs to familiarise primary school children with computer science and programming. Technology and computers is already woven so deeply and intricately into our society, there is no doubt that its capabilities will only increase as we continue to proceed forward in time, becoming more and more irreplaceable in our everyday lives. App Inventor was part of our ‘App and Minecraft Mod Maker’ program which was offered during our July Holiday Program. We used App Inventor as a tool to focus on familiarising our students with these computational concepts:
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
Pattern recognition: the ability to observe and record similarities in an effort to break down a problem into smaller pieces, or to make predictions for the future.
&lt;/p&gt;
&lt;p&gt;
Decomposition: the process of fragmenting a problem into smaller sections so that it is made easier to approach and resolve.
&lt;/p&gt;
&lt;p&gt;
Abstraction: to identify what information is important and exclude the unnecessary detail in order to simplify a complex task for easier management.
&lt;/p&gt;
&lt;p&gt;
Algorithms: a set of rules that serves as the instructions the computer uses in order to complete an assigned task.
&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/class1w.jpg&quot; style=&quot;float: left; margin-right: 10px; width: 48%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/app-closeup.png&quot; style=&quot;float: left; margin-right: 10px; width: 40%;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear:both;&quot;&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/classw.jpg&quot; style=&quot;display:block; margin:auto; width: 60%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/class3w.jpg&quot; style=&quot;display:block; margin:auto; width: 60%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here are some of the learning objectives for our students:
&lt;/p&gt;
&lt;h3&gt;Event Handler&lt;/h3&gt;
&lt;p&gt;
An Event Handler is a program that commands a response to an execution of an event. App Inventor consists mostly of this type of algorithmic logic: an event occurs, and the computer must act accordingly. The computer cannot act independently - it is nothing without our student’s planning at work. It is our students that must take the task to program the computer upon themselves so that it can comprehend the logic of this game: to make a choice between rock, paper, and scissors, to register the human player’s choice, to display a victory screen when a round is won, and such.&lt;br /&gt;
Through pattern recognition, students were able to calculate these kind of responses, and translate the method behind the game logically so that a non sentient computer can understand and execute the actions the way a human would be able to.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/rps.png&quot; style=&quot;float: left; margin-right: 10px; width: 30%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/class_interfaceW.jpg&quot; style=&quot;float: left; margin-right: 10px; width: 65%; margin-top: -20px;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;clear:both;&quot;&gt;Variables&lt;/h3&gt;
&lt;p&gt;
Variables are one of the fundamental concepts of programming. Variables are what stores information in a computer program. In an abstract concept, you can certainly imagine a program to be composed of many of these building blocks of data. Programmers manipulate variables as storage for data, for the assignment of data, and retrieval of said data, etc. At CS Academy, we teach students to utilise these building blocks accordingly: students learn to understand the concept of data, separate, and recall these data structures. In observing the role variables play in programming, students learnt about abstraction and algorithms.&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/variable-blocks.png&quot; style=&quot;display:block; margin:auto; width: 60%;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Cause and Effect&lt;/h3&gt;
&lt;p&gt;
Impulsivity is a trait often associated with children and teenagers - they can act without consideration of the consequences of their actions. The understanding and practice of planning ahead for the ‘rock, paper, scissors’ game allow the students to recognise and acknowledge the consequences of their actions, and like players in a game of chess, they must think ahead to be able to respond accordingly to future events. Cause and Effect allows the students to further develop their abilities in pattern recognition and their understanding of algorithms.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/class_winnerW.jpg&quot; style=&quot;float: left; margin-right: 10px; width: 40%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/computer-closeup.png&quot; style=&quot;float: left; margin-right: 10px; width: 48%;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;clear:both; margin-top: 50px;&quot;&gt;Procedures and Strategic Planning&lt;/h3&gt;
&lt;p&gt;
Once again, neither programming nor chess acts on improvisation. There is a procedure, a method to be followed. Just as chess players plan out their next moves, programmers need to decide upfront what they want their program to accomplish. Our students were taught to tackle the problem using decomposition: fragmenting it into smaller pieces so it is made easier to handle. During the planning process, they had to ask themselves a list of questions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;What is the purpose of their program?&lt;/li&gt;
&lt;li&gt;What does it need to do in specific circumstances? How should the program react to these circumstances?&lt;/li&gt;
&lt;li&gt;When should a point be attributed to the scoreboard and where should it happen? &lt;/li&gt;
&lt;li&gt;How is it going to happen?&lt;/li&gt;
&lt;li&gt;How will I write the code that will allow the A.I. to choose randomly between rock, paper, or scissors? How will I write the code that will register the human player’s choice?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/class_randomW.jpg&quot; style=&quot;float: left; margin-right: 10px; width: 48%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/class_strategicW.jpg&quot; style=&quot;float: left; margin-right: 10px; width: 45%; margin-top: -20px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/rps-blocks.png&quot; style=&quot;float:left; width: 60%;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear:both;&quot;&gt;An event handler with the rock button&lt;/p&gt;
&lt;p&gt;The teaching of strategic planning is to encourage students’ task management skills: being able to efficiently and successfully plan out their code. Should they delve further into the world of computing in their future, the skills of fragmentation and abstraction will, no doubt, be a valuable asset in their understanding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/class4w.jpg&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;List with Index Positioning&lt;/h3&gt;
&lt;p&gt;
By creating a pattern list of the opponent’s moves, player can memorise the A.I’s moves in a pattern and are able to win after playing for a number of times. The students were taught to observe and follow the patterns of programming. Furthermore, by implementing a list and manipulating it in the code to instruct the A.I to navigate the choice sequence in the list, students learnt about iteration with a list. &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class_interfaceW.jpg?itok=DaOhylMk&quot; width=&quot;480&quot; height=&quot;357&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class_randomW.jpg?itok=Nb4TsXwG&quot; width=&quot;355&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class_strategicW.jpg?itok=GO9pXbpb&quot; width=&quot;344&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class_winnerW.jpg?itok=o1p2sFuw&quot; width=&quot;336&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class1w.jpg?itok=c6L-53zY&quot; width=&quot;480&quot; height=&quot;344&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class2w.jpg?itok=Jj1jzCdA&quot; width=&quot;480&quot; height=&quot;360&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class3w.jpg?itok=MVPY1uOl&quot; width=&quot;480&quot; height=&quot;335&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/class4w.jpg?itok=oxtHpUvf&quot; width=&quot;480&quot; height=&quot;372&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/classw.jpg?itok=7nzReQYm&quot; width=&quot;480&quot; height=&quot;370&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/app-closeup.png?itok=TlLe9D-l&quot; width=&quot;480&quot; height=&quot;252&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/variable-blocks.png?itok=1UaYv_qQ&quot; width=&quot;480&quot; height=&quot;184&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/computer-closeup.png?itok=KftWlBmA&quot; width=&quot;480&quot; height=&quot;300&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/rps-blocks.png?itok=onoFQmhu&quot; width=&quot;480&quot; height=&quot;405&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/rps.png?itok=wFD3HCLa&quot; width=&quot;269&quot; height=&quot;448&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 12 Sep 2016 19:31:46 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">799 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Google Translate API and App Inventor: An Alternative to Yandex</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/09-1</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/morin.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Yvon Morin&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Nowadays, the number of connected devices available through the Internet has led to connected people. The infrastructure that supports all the communications between devices is also known as the Internet of Things(IoT).
&lt;/p&gt;
&lt;p&gt;
This blog is not intended to advertise Google API neither is its purpose to downplay the great features and capabilities of Yandex. It is only the author’s desire to share with the readers his experience that he thinks may serve a purpose as one may wish to know how to translate something in a language that may not be listed yet in the Yandex repertory or create an app with many different machine translator APIs for analysis and comparison.&lt;br /&gt;
Our goal in this blog is to provide the user a better understanding about how to filter the result from the web using JSON parser block or the Text features of App Inventor. Of course, when using Yandex, App Inventor has already taken care of those issues so users don’t have to worry about them. But with APIs other than Yandex, you must know how to manipulate the strings to get the desired result; this is what we are about to show you.&lt;/p&gt;
&lt;p&gt;
For this purpose, we create an app with the following components for the GUI:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A spinner button that will be used to select the desired language from a drop-down list. But the list only includes 4 languages for the purpose of this blog (French, Spanish, English and Haitian Creole)&lt;/li&gt;
&lt;li&gt;A textbox used to receive user input for translation. The hint for this text box is set with steps to get the user started.&lt;/li&gt;
&lt;li&gt;Two labels are used to show the output of the translated text from each server (Google and Yandex).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/yandex-app.png&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To get started with using machine translator API, we need to setup an account for the service unless we are using the built-in Yandex Procedure or method created for this purpose in App Inventor. Since we are making use of Google Translate API and Yandex, we need at least an account for google which we already have. Once an account created, we need to get to the API console to create a project and enable API for that project. When getting API credential for the project, please select browser API key. If help is needed on this process, please follow the API documentation available on the user console. Now that the API key has been created, how do we use it? This is the question that we promise to answer next.
&lt;/p&gt;
&lt;p&gt;
As mentioned before, one of the advantages of using Yandex is that App Inventor has already taken into account the method used to make a request to the web API and how to handle the response and moreover, no worries about creating an account. But when it comes to a custom API, you need to know how to handle it and this is what we are about to show you now. Before we do so, let’s take a look at the components involved in this app by looking at the list in the development interface.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/yandex-components.png&quot; style=&quot;display:block; margin:auto; width: 65%;&quot; /&gt;&lt;br /&gt;
If you look at figure 1a on the left above, there are two non-visible components at the bottom. One is web component that will be use to access the Google API through a URL and the other is the Yandex component available in App Inventor to deal with those tasks. If we take a look at the Google Translate API documentation, we will see that to make a request for translating a text through Google Translate API, we have to use the following URL:&lt;a href=&quot;https://www.googleapis.com/language/translate/v2?parameters&quot; target=&quot;_blank&quot;&gt;https://www.googleapis.com/language/translate/v2?parameters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Where the parameters are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;API key: Use the key parameter to identify your application.&lt;/li&gt;
&lt;li&gt;Target language: Use the target parameter to specify the language you want to translate into.&lt;/li&gt;
&lt;li&gt;Source text string: Use the q parameter to specify the text to translate.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here comes when we need to look back to where we left off when we were talking about creating a browser API Key and get credential for that key.&lt;/p&gt;
&lt;p&gt;
At this stage, we need to create three variables that will be combined by concatenation to make up the Google API Url needed to make sure we have a successful response (code 200).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/variables-api.png&quot; style=&quot;display:block; margin:auto; width: 80%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For security reasons, the API key shown above has been modified and therefore won’t work if used as is. &lt;/p&gt;
&lt;p&gt;
Let’s take a look at this block of code before we talk about the way we make the request to both APIs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/afterselecting-block.png&quot; style=&quot;float: left; margin-right: 10px; width: 55%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This block of codes tells App Inventor that after the user select a language from the list:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Assign the corresponding code to the variable languagecode.&lt;/li&gt;
&lt;li&gt;Hide the keyboard.&lt;/li&gt;
&lt;li&gt;Set the Google API URL to the concatenated text in the join block.&lt;/li&gt;
&lt;li&gt;Get the response.&lt;/li&gt;
&lt;li&gt;Request the same translation from yandex.&lt;/li&gt;
&lt;/ol&gt;&lt;p style=&quot;clear:both;&quot;&gt;Here is the difference between the requests to both Servers using their APIs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/translate-blocks.png&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;How do they respond to the request? We will only focus on the way the Google server responded since our objective is to show how to filter the targeted response from the metadata returned. &lt;/p&gt;
&lt;p&gt;
App Inventor already handled the Yandex returned result in this event:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/got-translation.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now let’s assume the response from Google is roughly displayed without being parsed, formatted or filtered. What would it look like?&lt;/p&gt;
&lt;p&gt;
With this block of code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/googleapi-gottext.png&quot; style=&quot;display:block; margin:auto; width: 70%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We would have something like this as output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/yandex-output.png&quot; style=&quot;float: left; margin-right: 10px; margin-left: 100px; width: 30%;&quot; /&gt;&lt;br /&gt;
As you may observe on the left, the Yandex translation has been done as expected, whereas google server has returned more than what we expected as a response and we need to find a technique to filter the desired response from what is returned. But the good news is whether you are a programmer or not, App Inventor makes it possible to bypass all the programming challenges that could stop us from getting the desired result. That’s why we will address the concerns of people with no knowledge of JavaScript or any programming language first.&lt;/p&gt;
&lt;p style=&quot;clear:both;&quot;&gt;Our focus is to get the string of characters between the double quotes inclusively “Me gustaria ver un cambio de tecnologia la forma de pensar.” To do so, we investigated and found that found out that the open quote before Me is at position 61 in the string.  We also found out that the length of the remaining string that follows the closing quote is 111. With this said let’s use the “segment text” block to extract the targeted string as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/segment-text.png&quot; style=&quot;display:block; margin:auto; width: 70%;&quot; /&gt;&lt;/p&gt;&lt;p&gt;To get rid of the quotes, we attached the previous block to the “replace all text” block as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/replace-text.png&quot; style=&quot;display:block; margin:auto; width: 70%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s observe the output if this block is connected to the googleAPI.GotText event.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/google-api-got-text.png&quot; style=&quot;display:block; margin:auto; width: 70%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/spanish-output.png&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:center&quot;&gt;Final App Inventor code for this version&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/final-api-code.png&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We have just shown you how to get the intended response after translation from the server using simple arithmetic calculations and the text manipulation features of App Inventor. Perhaps there are people on the other side of the world of App Inventor users who still wish to know another way to deal with the response. I assume these people may have some knowledge of JavaScript language or perhaps they have heard about JSON (JavaScript Object Notation) intended to be used in this practice as an alternative to what we just did. If we have a web component added to the UI as the one called googleAPI in our case, when click this component while in block editor, you will see a block like this one:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/json-decode.png&quot; style=&quot;display:block; margin:auto; width: 40%;&quot; /&gt;&lt;/p&gt;&lt;p&gt;If we proceed our investigation the same way we started earlier, we can attach the response content to this block to see what the output will look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/api-gotext-2.png&quot; style=&quot;display:block; margin:auto; width: 70%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The App Inventor JSON decoder has changed the response content to the output seen in purple. This output has led to a map shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/json-map.png&quot; style=&quot;display:block; margin:auto; width: 40%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This map tells us that if we make use of list of list, then we can have direct access to the last element by creating this chain of select list below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/json-list.png&quot; style=&quot;display:block; margin:auto; width: 60%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/json-long-list.png&quot; style=&quot;display:block; margin:auto; width: 80%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If we use a loop, we can bring that chain to a certain level of abstraction as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/json-abstraction.png&quot; style=&quot;display:block; margin:auto; width: 80%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/final-gottext.png&quot; style=&quot;display:block; margin:auto; width: 70%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here is the output that follows the block of code above:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/final-app-output.png&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;Final App Inventor code for this version&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/abs-final-blocks.png&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Brief, it may have been a long exercise, but we have covered our main objectives that were to provide users an alternative to Yandex API as means for text translation and different strategies or techniques that can be used the specific response from the response content. Among the techniques used, the text features of App Inventor and the JSON block of the web component have been used. The app created for the purpose of this blog can give the reader an opportunity to compare the accuracy of Google Translation vs Yandex Translation. &lt;/p&gt;
&lt;p&gt;
Use this QR Code if you want to try the app:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/translate-qr-code.png&quot; style=&quot;float: left; margin-right: 20px; width: 20%;&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/yandex-app.png?itok=gD5qgUDZ&quot; width=&quot;295&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/afterselecting-block.png?itok=yQRY4phD&quot; width=&quot;472&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/translate-blocks.png?itok=fh7-CCI6&quot; width=&quot;480&quot; height=&quot;103&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/got-translation.png?itok=4ipk8nKo&quot; width=&quot;428&quot; height=&quot;139&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/googleapi-gottext.png?itok=7-uwwy16&quot; width=&quot;480&quot; height=&quot;157&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/yandex-output.png?itok=EOZr21aH&quot; width=&quot;293&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/segment-text.png?itok=oqjotMT3&quot; width=&quot;480&quot; height=&quot;107&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/replace-text.png?itok=bJqPHEQG&quot; width=&quot;480&quot; height=&quot;118&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/api-gottext.png?itok=F_jlk0Hn&quot; width=&quot;480&quot; height=&quot;164&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/spanish-output.png?itok=f4eN427h&quot; width=&quot;295&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/json-decode.png?itok=TxxhKF2o&quot; width=&quot;286&quot; height=&quot;62&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/api-gotext-2.png?itok=H5TvQkVj&quot; width=&quot;480&quot; height=&quot;166&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/translate-qr-code.png?itok=H5qGh9_O&quot; width=&quot;200&quot; height=&quot;200&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/abs-final-blocks.png?itok=QNmH76oe&quot; width=&quot;480&quot; height=&quot;271&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/final-app-output.png?itok=V90Hngf3&quot; width=&quot;279&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/final-gottext.png?itok=Wh1ucDsm&quot; width=&quot;480&quot; height=&quot;189&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/json-abstraction.png?itok=K-DUhDch&quot; width=&quot;480&quot; height=&quot;176&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/json-long-list.png?itok=koVdGj71&quot; width=&quot;480&quot; height=&quot;91&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/json-list.png?itok=0qV_IyVn&quot; width=&quot;480&quot; height=&quot;65&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/json-map.png?itok=wJvjIcr8&quot; width=&quot;480&quot; height=&quot;108&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/variables-api.png?itok=kC1WpoYB&quot; width=&quot;480&quot; height=&quot;76&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/yandex-components.png?itok=zw2g1535&quot; width=&quot;468&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/google-api-got-text.png?itok=f20msSdI&quot; width=&quot;480&quot; height=&quot;157&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/final-api-code.png?itok=Ts-UVzZy&quot; width=&quot;480&quot; height=&quot;271&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 02 Sep 2016 21:27:42 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">798 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>MOSTEC Inventors Showcase Summer Apps</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/09-0</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://oeop.mit.edu/programs/mostec&quot; target=&quot;_blank&quot;&gt;MOSTEC&lt;/a&gt;, the MIT Online Science, Technology, and Engineering Community program, allows rising high school seniors the opportunity for academic study in several areas of STEM during the summer, followed by several months of enrichment activities during the fall of their senior year.
&lt;/p&gt;
&lt;p&gt;
Students choose to focus in one particular area, such as AstroPhysics, Aeronautical and Astronautical Engineering, and Mobile App Development. This July, MOSTEC participants took online classes in their chosen area for the entire month, then met as a larger group for a week of continued academic and social interaction in early August.
&lt;/p&gt;
&lt;p&gt;
I had the opportunity to meet some of these talented young people during their week of residence at MIT in August. The Mobile App Computing class met all week refining apps that they had worked on virtually throughout the summer. Each student created their own app, and the entire class worked on a group app together.
&lt;/p&gt;
&lt;p&gt;
Andrew McKinney, Director of Software Development for MIT App Inventor, and three visiting students - William Byrne from Northwestern University, and  Sauce and Andy from Hong Kong Polytechnic University - spent time with the class showing them the new Bluetooth Low Energy extension for App Inventor that allows users to create apps to interact with connected devices. Students got to see some neat demos of an app that tracked breathing capability by connecting to a spirometer, a bluetooth LE chat app, and an app that checks when a pill bottle is opened and closed.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/name-game.png&quot; alt=&quot;Name Game app screenshot&quot; style=&quot;float: left; margin-right: 3px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/spanish-app.png&quot; alt=&quot;Spanish learning app screenshot&quot; style=&quot;float: left; margin-right: 3px; margin-top: -20px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/travel-app.png&quot; alt=&quot;Where Should I Travel app screenshot&quot; style=&quot;float: left; margin-right: 3px; margin-top: -40px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/shopper-app.png&quot; alt=&quot;Costco Wholesale+ app screenshot&quot; style=&quot;float: left; margin-right: 3px; margin-top: -60px; width: 18%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/nyc-app.png&quot; alt=&quot;My NYC! app screenshot&quot; style=&quot;float: left; width: 18%; margin-top: -80px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear:both;&quot;&gt;
The final day of the week, each MOSTEC class presented their work to the larger group. The Mobile App Development students presented on MIT App Inventor, the social impact of apps, and then demonstrated the apps they had created as part of the program, using App Inventor.
&lt;/p&gt;
&lt;p&gt;
The group project, &lt;strong&gt;The Name Game&lt;/strong&gt;, was their method of learning each other’s names as their initial interactions were all virtual. The app enabled them to learn about each other before meeting face-to-face and also meant they had to collaborate to design, build, and test the app.
&lt;/p&gt;
&lt;p&gt;
There were many other interesting and unique apps demonstrated by the MOSTEC students. Here is a sampling of some of the apps:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Read it, Write it, and Speak it! (Spanish Version)&lt;/strong&gt;, by Stacy Manrique, teaches the Spanish alphabet, some basic Spanish phrases, numbers, colors, months and days, and food. Besides teaching vocabulary by simply displaying the words translated to Spanish, it also allows the user to hear how words are pronounced. Additionally, it teaches users facts about the Spanish language and culture.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Where Should I Travel?&lt;/strong&gt;, by Sara Kolbehdari, is a neat app that quizzes the user in order to determine where they should travel. After answering a series of questions, the user gets to see what is the optimum destination for their next travel experience. The user can then view the destination on a map.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Costco Wholesale+&lt;/strong&gt;, by Pablo and Willy, connects shoppers with similar interests so they can partner to take advantage of bulk discounts. Users can search for like-minded shoppers by category, then see a thread of posts and contact each other via text.
&lt;/p&gt;
&lt;p&gt;
Nicole Diaz and Melissa Aguirre used their extensive knowledge of the Big Apple to create &lt;strong&gt;Let’s Go NYC!&lt;/strong&gt; The app allows users to search and choose activities to do in New York. Aside from providing information about the activity, the app also provides directions to the activity. Users can search by age group and then by activity types. No way to be bored in NYC with this app!
&lt;/p&gt;
&lt;p&gt;
All the students’ apps presented showed creative and thoughtful planning and implementation. They showed poise and enthusiasm for app creation and entrepreneurship. &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Thu, 01 Sep 2016 20:39:21 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">796 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>WeTeach_CS Summit</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/09</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/roy.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Krishnendu Roy&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;
The Center for STEM Education at The University of Texas at Austin hosted the first WeTeach_CS Summit during June 7-9, 2016 (&lt;a href=&quot;http://www.thetrc.org/cs-summit-2016/&quot;&gt;http://www.thetrc.org/cs-summit-2016/&lt;/a&gt;). In this K12 teachers workshop around 280 K12 teachers from all across Texas participated in three days of training and professional development activities in various computing related topics that will help them to offer new and improved computing courses and lessons in their classrooms. App Inventor was well covered in multiple sessions. App Inventor Master Trainer Dr. Krishnendu Roy presented a session titled “Introduction to MIT App Inventor”. In this session around 90 K12 teachers were introduced to App Inventor environment. Most of the participants in this session have never worked on App Inventor before. Dr. Ralph Morelli, Professor of Computer Science at Trinity College and App Inventor Master Trainer Pauline Lake presented a session on Mobile CSP titled “Mobile CS Principles: Learning CS By Building Socially Useful Mobile Apps” which also featured App Inventor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Thu, 01 Sep 2016 19:27:46 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">795 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Experiments with Virtual Reality and MIT App Inventor</title>
 <link>http://explore.appinventor.mit.edu/blogs/hal/2016/08</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;Interest in virtual reality (VR) and augmented reality (AR) applications  is exploding.  Last month&#039;s Pokemon Go craze barely hints at what&#039;s coming.   Should we look forward to App Inventor creating  apps with  VR and AR?&lt;br /&gt;&lt;br /&gt;
I want to give a shout- out to Kseniia Shumelchyk , who worked with MIT App Inventor this summer in Google&#039;s Summer of Code program,  creating App Inventor apps for Google&#039;s Cardboard viewer.  You can see her paper about this here:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://ai2.appinventor.mit.edu/reference/other/vr.html&quot;&gt;Experiments with Virtual Reality and MIT App Inventor&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
Kseniia&#039;s paper presents two demo apps -- one that shows a panorama view and one that shows a 3D object.   You can run these demos, or build them for yourself and modify them.   Kseniia&#039;s project uses an auxiliary Java app that provides interface for the App Inventor ActiviyStarter to call the Google VR libraries.&lt;br /&gt;&lt;br /&gt;
This work is only just starting:  There&#039;s a lot to do to integrate mode VR and AR capabilities into App Inventor, and even more to do in creating great App Inventor apps that use these capabilities.&lt;br /&gt;&lt;br /&gt;
Thanks, Kseniia, for showing us how to get started!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 30 Aug 2016 01:42:06 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">793 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Synchronizing Time With App Inventor</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/08</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/interdonato.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Rich Interdonato&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Synchronizing time across mobile devices is a very challenging problem for app makers.  The moment you try to use App Inventor to make something happen on more than one device at exactly the same time, you will discover that every device reports the current time to be (slightly) different from all others - even when the devices are each set to synchronize their time with the network, as shown below.
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/synchronize-time.png&quot; style=&quot;clear: both; display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can very easily demonstrate this for yourself by setting the same alarm (for some time in the future) on more than one device and then waiting for it to go off.  When the alarms are triggered, you will find that they actually fire at different times, even though they are set to go off simultaneously.  This is true even if the devices are set to synchronize their internal clocks with the network time.&lt;/p&gt;
&lt;p&gt;
 It turns out that the clocks used in mobile devices are not perfectly accurate.  What is more, the inaccuracy in timekeeping accumulates from the moment the clock is set, such that individual seconds are more accurate than individual minutes, which are more accurate than individual hours and so on.  For example, if the true duration of each second of time kept by a clock is off by .1 ms (.0001 seconds), then each minute will be off by 6 ms (.006 seconds), each hour will be off by 360 ms (.36 seconds), and each day will off by 8640 ms (8.64 seconds).  This explains why the alarms set for the same time on different phones go off at noticeably different times, even when the devices are all &quot;synchronized&quot; to the same network time.
&lt;/p&gt;
&lt;p&gt;
In most cases, this is not a problem for App Inventors. However, if you are making a clock, a timer, or any other app that requires something to happen at a precise time (or at exactly the same moment on more than one device), then it is a very big problem indeed. For example, a student of mine wanted to create a simple app that caused the device&#039;s screen background color to be BLUE during every ODD second and to be RED during every EVEN second, in order to create a &quot;light show&quot; using many devices.  They were frustrated to discover that when the time was not the same on each device running their app, the colors didn&#039;t blink in unison, and so their app didn&#039;t really &quot;work&quot;.  Likewise, in more sophisticated multiplayer games where players (and their projectiles) move about the game worlds shared across multiple devices, if objects don&#039;t &quot;meet&quot; at the same time, these games don&#039;t really &quot;work&quot; either.  So what can we do?
&lt;/p&gt;
&lt;p&gt;
Fortunately there are a number of ways to synchronize time across multiple devices, but at present this feature is not built into App Inventor. App Inventor extensions allow you to get very accurate time if you want to write the Java code needed to communicate with a network time server, and this might be what you have to do if you require very precise timekeeping in your app. If you only need to approximately synchronize the time across devices, then you can choose any time source on the Internet as the &quot;official&quot; clock for your app.  Then you can  get the &quot;official&quot; time when your app starts, and calculate the difference between it and the device&#039;s internal time.  This time difference, called the &quot;offset&quot;, can then be used to adjust the device&#039;s time (forward or backward) to match to time reported by the &quot;official&quot; time source, more or less.
&lt;/p&gt;
&lt;p&gt;
Until Internet communication is instantaneous for everyone, having a single source of time is not a perfect solution to the synchronization problem. This is because all the devices being synchronized have to send out requests for the &quot;official&quot; time and then wait for a response back from the time server.  Even if the time server could send out &quot;official&quot; time responses at the very instant it received the requests, the response messages still take time to travel back to the requestor and are incorrect by exactly that amount of time. As long as transit time through the Internet is unpredictable, time synchronization will be inexact.
&lt;/p&gt;
&lt;p&gt;
Since the &quot;official&quot; time that is received by the app requesting it was only accurate at the moment the message was sent by the server, the receiver needs to adjust it in order to account for the time that elapsed during the message&#039;s transit.  Although the app receiving the &quot;official&quot; time does not know exactly when the time server sent the response, it does know when it originally made the request (according to its own clock), and therefore it can determine the &quot;round trip&quot; duration of the total request-response process.  If we assume that the time required to transmit the request is the same as the time required to receive a response, then half the &quot;round trip&quot; is the time taken by the message coming back from the server.  This additional amount of time should be added to the difference between the device&#039;s internal time and the &quot;official&quot; time, in order to improve the accuracy of the calculated offset.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/synchronize-time.png?itok=7cO86Wse&quot; width=&quot;273&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 29 Aug 2016 20:12:36 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">792 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Feel the Math with App Inventor</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/08/feel</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/zhou.jpeg&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Angie Zhou&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;For a lot of young students, learning mathematics means rules to memorize and word problems that exist on paper. But as adults, we know having a sophisticated understanding of mathematical concepts will go a long way in understanding  the world and other social and natural science subjects.
 &lt;/p&gt;
&lt;p&gt;
One way we can let students feel the math and play with the math is to use a simple programming tool – MIT App Inventor. We can make practical application of mathematics come alive in the classrooms.
 &lt;/p&gt;
&lt;p&gt;
In this post, I am going to give three examples for which young students can play with various areas of mathematics, and see how it applies in real life with just a little bit of programming and lots of fun. &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Feel the calculus by drawing curved lines&lt;/li&gt;
&lt;li&gt;Think about probability and program a cheating die&lt;/li&gt;
&lt;li&gt;Understand transformation with Instagram filters&lt;/li&gt;
&lt;/ul&gt;&lt;h3 style=&quot;padding-top: 30px;&quot;&gt;Feel the calculus&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://appinventor.mit.edu/explore/ai2/paintpot-part1.html&quot; target=&quot;_blank&quot;&gt;PaintPot&lt;/a&gt; is a beginner-level app that allows users to draw on a virtual canvas.  To program drawing curved lines, students use a very interesting event-handler:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Blocks_PaintPot.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
When I taught this app, many students wondered - why are we using the DrawLine function call, which draws straight lines, to draw curved lines?
&lt;/p&gt;
&lt;p&gt;
I happily explained, to draw a curved line, you are really drawing lots of very small straight lines. These infinitesimal straight lines can make up curved lines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/PaintPotCalculus.gif&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
There, we are already giving students a sense of calculus without showing any equations.
&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 30px;&quot;&gt;Play with probability&lt;/h3&gt;
&lt;p&gt;A simple dice can be programmed using an App Inventor button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Dice.gif&quot; style=&quot;float: left; margin-right: 10px; width: 20%;&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Blocks_Dice1.png&quot; style=&quot;float: left; margin-right: 10px; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear:both&quot;&gt;After students learn about the basic probability concepts, apart from doing word problems, they can apply their newly acquired knowledge to program something interesting - dice with various specifications. Below is the solution for a dice with six coming up half of the time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Blocks_Dice2.png&quot; style=&quot;float: left; margin-right: 10px; width: 35%;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;clear:both; padding-top: 30px;&quot;&gt;Look at transformation&lt;/h3&gt;
&lt;p&gt;
The last example is not related to App Inventor, but I put it in here because it’s for a relatively abstract and advanced concept that is close to students’ lives.
&lt;/p&gt;
&lt;p&gt;
Back when I was young, transformation and matrices were just learning the rules and completing the problems, never seeing how it’s going to be useful. Maths teachers said they were going be useful, and I had to take their word for it.
&lt;/p&gt;
&lt;p&gt;
But now, I can tell students the photo filters they have been using can be made with transformations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/Transformation.png&quot; style=&quot;display:block; margin:auto; width: 75%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Note: the formula is a hypothetical formula used to illustrate the transformation process. The real formula of a filter is most likely much more complex. &lt;/i&gt;&lt;/p&gt;
&lt;p&gt;For instance, every pixel of an image can use a formula to be transformed into a different color. If you have all the formula of the pixels worked out, then you would have built the secret formula to make a photo filter.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Blocks_Dice1.png?itok=a0azrf7Y&quot; width=&quot;408&quot; height=&quot;150&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Blocks_Dice2.png?itok=yHOb6rbw&quot; width=&quot;288&quot; height=&quot;183&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Blocks_PaintPot.png?itok=fZ8IqyeG&quot; width=&quot;480&quot; height=&quot;169&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Dice.gif?itok=HPUmf3AD&quot; width=&quot;320&quot; height=&quot;393&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/PaintPotCalculus.gif?itok=ctxGRWir&quot; width=&quot;320&quot; height=&quot;385&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/Transformation.png?itok=rk-JlYv5&quot; width=&quot;480&quot; height=&quot;329&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 23 Aug 2016 19:03:36 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">788 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Welcome Mike Tissenbaum and Evan Patton to the MIT App Inventor team</title>
 <link>http://explore.appinventor.mit.edu/blogs/hal/2016/08/welcome</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;Welcome Mike Tissenbaum and Evan Patton to the MIT App Inventor team&lt;/p&gt;
&lt;p&gt;Those of us at MIT this summer already know Mike and Evan, but I&#039;d like to announce to the entire App Inventor community our delight at welcoming two our new members to the core MIT App Inventor team.&lt;/p&gt;
&lt;p&gt;Mike Tissenbaum comes to App Inventor upon completing a postdoc in Madison at the School of Education, University Wisconsin, a position he took up after earning a Ph.D. at University of Toronto&#039;s Ontario Institute for Studies in Education.   Mike&#039;s work on design principles to support collaborative inquiry in smart classrooms was nominated as the best student paper at the 2014 International Conference for the Learning Sciences (ICLS). He&#039;s interested in formal and informal learning environments to support computational literacies, and in gaining insight into these through data mining and learning analytics.  Mike has developed and run several multi-week after-school Scratch programming Camps for kids 8-16, and he&#039;s looking forward to advancing research into blocks-based programming environments and how they support learners in developing socially relevant questions about the world.   At MIT, Mike is assuming the position of research scientist in App Inventor&#039;s project for the Hong Kong primary schools on computational thinking and coding education.&lt;/p&gt;
&lt;p&gt;Our second new team member, Evan Patton, recently completed his doctorate at RPI.  Evan is new to the MIT team, but hardly new to App Inventor -- he&#039;s been a prime contributor to the Punya platform (an extension of App Inventor) and he developed the unit testing framework for Punya and App Inventor.   Beyond App Inventor, he’s been a consultant to startups in developing both Android and iOS applications.  He also administered and developed hardware to support Web applications with large user bases in the scientific community.  At MIT, Evan has now become a senior member of the App Inventor development team, and he has with special responsibility for our infrastructure with the Hong Kong project.&lt;/p&gt;
&lt;p&gt;Mike and Evan bring enormous expertise and greatly increase capacity to the MIT team.&lt;/p&gt;
&lt;p&gt;Welcome!
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 08 Aug 2016 23:39:27 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">787 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Heart Rate Monitor with Arduino/Genuino 101</title>
 <link>http://explore.appinventor.mit.edu/blogs/karen/2016/08/heart</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/nunez.png&quot; style=&quot;float: left; margin-right: 10px; width: 15%;&quot; /&gt;This is a guest blog by MIT Master Trainer Jose Luis Núñez&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Nowadays, the number of connected devices available through the Internet has led to connected people. The infrastructure that supports all the communications between devices is also known as the Internet of Things(IoT).
&lt;/p&gt;
&lt;p&gt;
The need to create apps that can handle IoT has contributed to the development of an extension for MIT App Inventor that provides an easy way to connect to devices.
&lt;/p&gt;
&lt;p&gt;
This tutorial will teach you how to use the Arduino/Genuino 101 board to read data from a heart rate sensor using the Bluetooth Low Energy(BLE) component. If you don&#039;t have the original sensor you can emulate it by using a potentiometer or another analog sensor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/AnimatedGIFHeartRateMonitor.gif&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Arduino/Genuino 101 board&lt;/li&gt;
&lt;li&gt;LED&lt;/li&gt;
&lt;li&gt;Heart rate sensor, potentiometer or similar analog component&lt;/li&gt;
&lt;li&gt;Arduino IDE (&lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;https://www.arduino.cc/en/Main/Software&lt;/a&gt;) with libraries BLE and CurieBLE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;The Circuit&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/fritzing.jpg&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Arduino/Genuino 101 sketch&lt;/h3&gt;
&lt;p&gt;First, we will have to implement the standard Bluetooth Low Energy &quot;Heart Rate Monitor&quot; service using the Arduino IDE and loading a sketch into our board.&lt;/p&gt;
&lt;p&gt;You can copy and paste the source code from:&lt;br /&gt;&lt;a href=&quot;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&quot; target=&quot;_blank&quot;&gt;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following points show the operating mode of the sketch:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Declare the BLE peripheral device (our Arduino board) with its service and characteristic (heart rate sensor).
&lt;/li&gt;&lt;li&gt;Wait for incoming connection with a central device (our smartphone or tablet with Bluetooth).&lt;/li&gt;
&lt;li&gt;Switch on LED to indicate that the board is connected.&lt;/li&gt;
&lt;li&gt;Read the analog sensor updating the value when it changes.&lt;/li&gt;
&lt;li&gt;Switch off the LED when the connection finishes.&lt;/li&gt;
&lt;/ol&gt;&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Designer view&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm-designer.png&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We will use the necessary arrangements to display an image of a heart that beats when the devices are bonded, a set of buttons and a label to show the status.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm-components.png&quot; style=&quot;display:block; margin:auto; width: 30%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We will read data from the sensor updating the text of the label once devices are linked. We will have to import the Bluetooth LE extension to be able to receive the values from the sensor.&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;Blocks View&lt;/h3&gt;
&lt;p&gt;First, we will initialize three global variables to store the address of our Arduino/Genuino 101 board, the standard &quot;Heart Rate Monitor&quot; service and its characteristic UUIDs. If you don&#039;t know the meaning of these concepts, you should review them on the &lt;a href=&quot;http://ai2.appinventor.mit.edu/reference/other/IoT.html&quot; target=&quot;_blank&quot;&gt;MIT App Inventor IoT reference page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm0.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When the app starts, we will disable the button named &quot;btnDisconnect&quot; and the timer...it doesn&#039;t make sense if we don&#039;t have a link established.&lt;br /&gt;
At first, the user will press the Scan button and will get a list of Bluetooth devices. We will use a list picker to select our Arduino/Genuino 101 board and connect to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm1.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If all goes well we will update the status on the screen using the label. We will also enable the Disconnect button to be able to disconnect from the peripheral device and the timer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm2.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Every second, an event will trigger the clock and our app will check the connection. If all is OK, the app will play a sound of a heart beat and it will change the image while tries to get data from the sensor. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm3.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A &lt;i&gt;ByteValueChanged &lt;/i&gt;event will be triggered when our app detects a change. The new value will be assigned to the text of the label. We will have to use the math round function to convert the byte to a whole number and remove the least significant 0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm4.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, the buttons that will allow user to disconnect and exit...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/blog/hrm.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;That&#039;s all!&lt;br /&gt;
Happy inventing!&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;You can download the source code from this link:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=0B0k5c5YtPa8EZWRfZWFIbkY3MG8&quot; target=&quot;_blank&quot;&gt;https://drive.google.com/open?id=0B0k5c5YtPa8EZWRfZWFIbkY3MG8&lt;/a&gt;&lt;/p&gt;
&lt;h3 style=&quot;padding-top: 1em;&quot;&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&quot; target=&quot;_blank&quot;&gt;https://www.arduino.cc/en/Tutorial/Genuino101CurieBLEHeartRateMonitor&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://ai2.appinventor.mit.edu/reference/other/IoT.html&quot; target=&quot;_blank&quot;&gt;http://ai2.appinventor.mit.edu/reference/other/IoT.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-images field-type-image field-label-hidden view-mode-rss&quot;&gt;
    &lt;div class=&quot;field-items&quot;&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm-designer.png?itok=gEGtvdFu&quot; width=&quot;480&quot; height=&quot;282&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm-components.png?itok=K4L1Rvbs&quot; width=&quot;184&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm-blocks.png?itok=l8TejI7g&quot; width=&quot;480&quot; height=&quot;287&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm.png?itok=57TaVPmH&quot; width=&quot;480&quot; height=&quot;177&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm4.png?itok=qntIcjdl&quot; width=&quot;480&quot; height=&quot;133&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm3.png?itok=Yp-vjFoM&quot; width=&quot;480&quot; height=&quot;292&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm2.png?itok=7bQHZLP2&quot; width=&quot;480&quot; height=&quot;279&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm1.png?itok=0gENQ3WL&quot; width=&quot;480&quot; height=&quot;210&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/hrm0.png?itok=5SwBnLsp&quot; width=&quot;480&quot; height=&quot;81&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/AnimatedGIFHeartRateMonitor.gif?itok=fyODXpko&quot; width=&quot;285&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/fritzing.jpg?itok=1g-6JFGy&quot; width=&quot;306&quot; height=&quot;480&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
          &lt;figure class=&quot;field-item&quot;&gt;
        &lt;img typeof=&quot;foaf:Image&quot; src=&quot;http://explore.appinventor.mit.edu/sites/explore.appinventor.mit.edu/files/styles/large/public/blog/heart-rate-monitor.png?itok=VOrZBD-u&quot; width=&quot;290&quot; height=&quot;226&quot; alt=&quot;&quot; /&gt;              &lt;/figure&gt;
      &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;field field-name-field-genre field-type-list-text field-label-above view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Genre:&amp;nbsp;&lt;/h2&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;Blog&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 08 Aug 2016 15:48:03 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">786 at http://explore.appinventor.mit.edu</guid>
</item>
</channel>
</rss>
